# version is now using "compose spec"
# v2 and v3 are now combined!
# docker-compose v1.27+ required

services:
  vote:
    build:
      context: ./vote
      target: dev
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost" ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes:
      - ./vote:/usr/local/app
    ports:
      - "8080:80"
    networks:
      - front-tier
      - back-tier
    labels:
      com.datadoghq.ad.logs: '[{"source": "vote", "service": "vote"}]'

  result:
    build: ./result
    # use nodemon rather than node for local dev
    entrypoint: nodemon --inspect=0.0.0.0 server.js
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./result:/usr/local/app
    ports:
      - "8081:80"
      - "127.0.0.1:9229:9229"
    networks:
      - front-tier
      - back-tier
    labels:
      com.datadoghq.ad.logs: '[{"source": "result", "service": "result"}]'

  worker:
    build:
      context: ./worker
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - back-tier
    labels:
      com.datadoghq.ad.logs: '[{"source": "worker", "service": "worker"}]'

  redis:
    image: redis:alpine
    volumes:
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/redis.sh
      interval: "5s"
    networks:
      - back-tier
    labels:
      com.datadoghq.ad.logs: '[{"source": "redis", "service": "redis"}]'

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - "db-data:/var/lib/postgresql/data"
      - "./healthchecks:/healthchecks"
    healthcheck:
      test: /healthchecks/postgres.sh
      interval: "5s"
    networks:
      - back-tier
    labels:
      com.datadoghq.ad.logs: '[{"source": "db", "service": "db"}]'

  # this service runs once to seed the database with votes
  # it won't run unless you specify the "seed" profile
  # docker compose --profile seed up -d
  seed:
    build: ./seed-data
    profiles: [ "seed" ]
    depends_on:
      vote:
        condition: service_healthy
    networks:
      - front-tier
    restart: "no"

  # agent section
  datadog:
    container_name: dd-agent
    build: datadog
    pid: host
    links:
      - vote
      - result
      - worker
      - redis
      - db
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true # enables agent to receive custom metrics from other containers
      - DD_APM_ENABLED=true # enables tracing
      - DD_APM_NON_LOCAL_TRAFFIC=true # enables agent to receive traces from other containers
      - DD_AGENT_HOST=dd-agent # allows web container to forward traces to agent
      - DD_SITE=datadoghq.eu # determines datadog instance to send data to (e.g change to datadoghq.eu for EU1)
      - DD_LOGS_ENABLED=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro

volumes:
  db-data:


networks:
  front-tier:
  back-tier:
